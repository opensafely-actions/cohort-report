import pathlib
import re

import pandas as pd
import pytest

from cohortreport import errors, report


@pytest.fixture
def path_to_input_csv(tmp_path):
    """Gets a `pathlib.Path` to an input CSV.

    The input CSV is similar to that generated by cohort-extractor from a study
    definition. It exists within a subdirectory of the default base temporary directory,
    which you can override by passing `--basetemp=my_basetemp` to `pytest`.
    """
    patient_records = pd.DataFrame(
        {
            "sex": ["M", "F"] * 50,
            "bmi": range(100),
            "has_copd": [0, 1] * 50,
        }
    )
    patient_records["patient_id"] = range(len(patient_records))

    path_to_input_csv = tmp_path / "input.csv"
    patient_records.to_csv(path_to_input_csv, index=False)

    return path_to_input_csv


def test_make_report(path_to_input_csv):
    """This is a smoke test: it's very coarse-grained and helps us to decide whether we
    should write more fine-grained tests."""
    path_to_output_dir = path_to_input_csv.parent
    report.make_report(
        path_to_input_csv,
        str(path_to_output_dir),
        {
            "sex": "categorical",
            "bmi": "float",
            "has_copd": "binary",
        },
    )
    path_to_output_html = (
        path_to_output_dir / f"descriptives_{path_to_input_csv.stem}.html"
    )
    assert path_to_output_html.exists()
    output_html = path_to_output_html.read_text()
    src_attrs = re.findall(r'src="([\w\.]+)"', output_html)
    assert src_attrs == ["sex.png", "bmi.png", "has_copd.png"]


@pytest.mark.parametrize(["ext"], [(".csv",), (".csv.gz",)])
def test_make_report_with_csv_file_but_without_variable_types(ext):
    with pytest.raises(errors.ConfigAndFileMismatchError):
        report.make_report(pathlib.Path(f"output/input{ext}"), "output", None)
